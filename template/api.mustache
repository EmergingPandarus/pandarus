require "pandarus/api_base"
require "pandarus/models"

{{#operations}}
# This is an autogenerated file. See readme.md
module Pandarus
  class {{classname}} < APIBase

    self.prefix = "{{basePath}}"

    {{#operation}}{{newline}}
    # {{summary}}
    def {{nickname}}({{#requiredParams}}{{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}},{{/requiredParams}} opts={})
      query_param_keys = [
        {{#queryParams}}:{{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/queryParams}}{{newline}}
      ]

      form_param_keys = [
        {{#formParams}}:{{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/formParams}}{{newline}}
      ]

      {{#requiredParamCount}}
      # verify existence of params
      {{#requiredParams}}
      raise "{{{paramName}}} is required" if {{{paramName}}}.nil?
      {{/requiredParams}}
      {{/requiredParamCount}}

      # set default values and merge with input
      options = underscored_merge_opts(opts,
        {{#requiredParams}}:{{paramName}} => {{paramName}}{{#hasMore}},
        {{/hasMore}}
      {{/requiredParams}}
      {{^requiredParams}}
        {}
      {{/requiredParams}}{{newline}}
      )

      # resource path
      path = path_replace("{{path}}",
        {{#pathParams}}:{{baseName}} => {{paramName}}{{#hasMore}},
        {{/hasMore}}{{/pathParams}}
      )
      {{#headerParams}}headers = {
        {{{paramName}}}: {{{paramName}}},
      }
      {{/headerParams}}
      {{^headerParams}}headers = nil
      {{/headerParams}}

      form_params = select_params(options, form_param_keys)
      query_params = select_query_params(options, query_param_keys)

      {{#returnContainer}}
      {{#returnType}}
      RemoteCollection.new(connection, {{returnBaseType}}, path, query_params)
      {{/returnType}}
      {{^returnType}}
      if opts[:next_page]
        return [] if was_last_page?(:{{httpMethodLowerCase}}, path)
        page_params = page_params_load(:{{httpMethodLowerCase}}, path)
        if(page_params && page_params[:next])
          query_params.merge! page_params[:next]
        end
      end
      response = mixed_request(:{{httpMethodLowerCase}}, path, query_params, form_params, headers)
      page_params_store(:{{httpMethodLowerCase}}, path)
      raise "Array returned when object expected" if response.is_a?(Array)
      response
      {{/returnType}}
      {{/returnContainer}}

      {{^returnContainer}}
      response = mixed_request(:{{httpMethodLowerCase}}, path, query_params, form_params, headers)
      {{#returnType}}
      {{returnBaseType}}.new(response)
      {{/returnType}}
      {{^returnType}}
      response
      {{/returnType}}
      {{/returnContainer}}
      {{newline}}
    end
    {{/operation}}
    {{newline}}
  end
end
{{/operations}}
